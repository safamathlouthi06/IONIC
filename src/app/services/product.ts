import { Injectable } from '@angular/core';
import { firestore } from '../firebase'; // Configuration Firebase initialis√©e
import {
  collection,
  addDoc,
  doc,
  getDocs,
  getDoc,
  query,
  where,
  updateDoc,
  deleteDoc,
  orderBy
} from 'firebase/firestore';

// Interface d√©finissant la structure d'un produit
export interface Product {
  id?: string; // Optionnel car g√©n√©r√© par Firestore
  name: string; // Nom du produit (obligatoire)
  price: number; // Prix du produit (obligatoire)
  description?: string; // Description optionnelle
  imageUrl?: string; // URL de l'image optionnelle
  ownerId: string; // ID du propri√©taire/vendeur (obligatoire)
  category: string; // Cat√©gorie du produit (obligatoire)
}

@Injectable({
  providedIn: 'root' // Service disponible globalement
})
export class ProductService {
  private collectionName = 'products'; // Nom de la collection Firestore

  constructor() {}

  // ‚ûï Ajouter un nouveau produit
  async addProduct(product: Product) {
    // addDoc g√©n√®re automatiquement un ID unique
    return addDoc(collection(firestore, this.collectionName), product);
  }

  // üì¶ R√©cup√©rer tous les produits (tri√©s par nom)
  async getProducts(): Promise<Product[]> {
    // Cr√©ation d'une requ√™te avec tri par nom
    const q = query(collection(firestore, this.collectionName), orderBy('name'));
    const snapshot = await getDocs(q);
    
    // Transformation des documents Firestore en objets Product
    return snapshot.docs.map(docSnap => ({
      id: docSnap.id, // ID du document Firestore
      ...(docSnap.data() as Product) // Donn√©es du produit
    }));
  }

  // üë§ R√©cup√©rer les produits d'un utilisateur sp√©cifique
  async getProductsByUser(userId: string): Promise<Product[]> {
    try {
      // Requ√™te optimis√©e avec filtre Firestore
      const q = query(
        collection(firestore, this.collectionName), 
        where('ownerId', '==', userId) // Filtre c√¥t√© serveur
      );
      const snapshot = await getDocs(q);
      const products = snapshot.docs.map(docSnap => ({
        id: docSnap.id,
        ...(docSnap.data() as Product)
      }));
      
      return products;
      
    } catch (error: any) {
      // Fallback en cas d'index manquant dans Firestore
      if (error.code === 'failed-precondition') {
        console.warn('Index missing, using client-side filtering');
        // R√©cup√®re tous les produits et filtre c√¥t√© client
        const allProducts = await this.getProducts();
        return allProducts.filter(product => product.ownerId === userId);
      }
      throw error; // Propage les autres erreurs
    }
  }

  // üîç R√©cup√©rer un produit sp√©cifique par son ID
  async getProductById(id: string): Promise<Product | null> {
    const docRef = doc(firestore, this.collectionName, id);
    const docSnap = await getDoc(docRef);
    if (docSnap.exists()) {
      return { 
        id: docSnap.id, 
        ...(docSnap.data() as Product) 
      };
    } else {
      return null; // Produit non trouv√©
    }
  }

  // ‚úèÔ∏è Mettre √† jour un produit existant
  async updateProduct(product: Product) {
    if (!product.id) throw new Error('Product ID is required');
    
    // S√©paration de l'ID des donn√©es √† mettre √† jour
    const { id, ...data } = product;
    await updateDoc(doc(firestore, this.collectionName, id), data);
  }

  // ‚ùå Supprimer un produit
  async deleteProduct(productId: string) {
    await deleteDoc(doc(firestore, this.collectionName, productId));
  }

  // Alias pratique pour la suppression
  async removeProduct(productId: string) {
    return this.deleteProduct(productId);
  }
}